$date
	Fri Feb  2 05:07:52 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module axi_tb $end
$var wire 2 ! m00_axi_arburst [1:0] $end
$var wire 4 " m00_axi_arcache [3:0] $end
$var wire 1 # m00_axi_aresetn $end
$var wire 4 $ m00_axi_arid [3:0] $end
$var wire 8 % m00_axi_arlen [7:0] $end
$var wire 1 & m00_axi_arlock $end
$var wire 3 ' m00_axi_arprot [2:0] $end
$var wire 4 ( m00_axi_arqos [3:0] $end
$var wire 1 ) m00_axi_arready $end
$var wire 2 * m00_axi_aruser [-1:0] $end
$var wire 32 + m00_axi_awaddr [31:0] $end
$var wire 2 , m00_axi_awburst [1:0] $end
$var wire 4 - m00_axi_awcache [3:0] $end
$var wire 4 . m00_axi_awid [3:0] $end
$var wire 8 / m00_axi_awlen [7:0] $end
$var wire 1 0 m00_axi_awlock $end
$var wire 3 1 m00_axi_awprot [2:0] $end
$var wire 4 2 m00_axi_awqos [3:0] $end
$var wire 3 3 m00_axi_awsize [2:0] $end
$var wire 2 4 m00_axi_awuser [-1:0] $end
$var wire 1 5 m00_axi_awvalid $end
$var wire 4 6 m00_axi_bid [3:0] $end
$var wire 2 7 m00_axi_bresp [1:0] $end
$var wire 2 8 m00_axi_buser [-1:0] $end
$var wire 1 9 m00_axi_bvalid $end
$var wire 32 : m00_axi_rdata [31:0] $end
$var wire 4 ; m00_axi_rid [3:0] $end
$var wire 1 < m00_axi_rlast $end
$var wire 2 = m00_axi_rresp [1:0] $end
$var wire 2 > m00_axi_ruser [-1:0] $end
$var wire 1 ? m00_axi_rvalid $end
$var wire 32 @ m00_axi_wdata [31:0] $end
$var wire 1 A m00_axi_wlast $end
$var wire 4 B m00_axi_wstrb [3:0] $end
$var wire 2 C m00_axi_wuser [-1:0] $end
$var wire 1 D m00_axi_wvalid $end
$var wire 1 E m00_axi_txn_done $end
$var wire 1 F m00_axi_rready $end
$var wire 1 G m00_axi_error $end
$var wire 1 H m00_axi_bready $end
$var wire 1 I m00_axi_arvalid $end
$var wire 3 J m00_axi_arsize [2:0] $end
$var wire 32 K m00_axi_araddr [31:0] $end
$var reg 1 L m00_axi_aclk $end
$var reg 1 M m00_axi_awready $end
$var reg 1 N m00_axi_init_axi_txn $end
$var reg 1 O m00_axi_wready $end
$scope module axi_con $end
$var wire 1 L m00_axi_aclk $end
$var wire 2 P m00_axi_arburst [1:0] $end
$var wire 4 Q m00_axi_arcache [3:0] $end
$var wire 1 # m00_axi_aresetn $end
$var wire 4 R m00_axi_arid [3:0] $end
$var wire 8 S m00_axi_arlen [7:0] $end
$var wire 1 & m00_axi_arlock $end
$var wire 3 T m00_axi_arprot [2:0] $end
$var wire 4 U m00_axi_arqos [3:0] $end
$var wire 1 ) m00_axi_arready $end
$var wire 2 V m00_axi_aruser [-1:0] $end
$var wire 32 W m00_axi_awaddr [31:0] $end
$var wire 2 X m00_axi_awburst [1:0] $end
$var wire 4 Y m00_axi_awcache [3:0] $end
$var wire 4 Z m00_axi_awid [3:0] $end
$var wire 8 [ m00_axi_awlen [7:0] $end
$var wire 1 0 m00_axi_awlock $end
$var wire 3 \ m00_axi_awprot [2:0] $end
$var wire 4 ] m00_axi_awqos [3:0] $end
$var wire 1 M m00_axi_awready $end
$var wire 3 ^ m00_axi_awsize [2:0] $end
$var wire 2 _ m00_axi_awuser [-1:0] $end
$var wire 1 5 m00_axi_awvalid $end
$var wire 4 ` m00_axi_bid [3:0] $end
$var wire 2 a m00_axi_bresp [1:0] $end
$var wire 2 b m00_axi_buser [-1:0] $end
$var wire 1 9 m00_axi_bvalid $end
$var wire 1 N m00_axi_init_axi_txn $end
$var wire 32 c m00_axi_rdata [31:0] $end
$var wire 4 d m00_axi_rid [3:0] $end
$var wire 1 < m00_axi_rlast $end
$var wire 2 e m00_axi_rresp [1:0] $end
$var wire 2 f m00_axi_ruser [-1:0] $end
$var wire 1 ? m00_axi_rvalid $end
$var wire 32 g m00_axi_wdata [31:0] $end
$var wire 1 A m00_axi_wlast $end
$var wire 1 O m00_axi_wready $end
$var wire 4 h m00_axi_wstrb [3:0] $end
$var wire 2 i m00_axi_wuser [-1:0] $end
$var wire 1 D m00_axi_wvalid $end
$var wire 1 E m00_axi_txn_done $end
$var wire 1 F m00_axi_rready $end
$var wire 1 G m00_axi_error $end
$var wire 1 H m00_axi_bready $end
$var wire 1 I m00_axi_arvalid $end
$var wire 3 j m00_axi_arsize [2:0] $end
$var wire 32 k m00_axi_araddr [31:0] $end
$scope module axi_controller_v1_1_M00_AXI_inst $end
$var wire 1 N INIT_AXI_TXN $end
$var wire 1 L M_AXI_ACLK $end
$var wire 2 l M_AXI_ARBURST [1:0] $end
$var wire 4 m M_AXI_ARCACHE [3:0] $end
$var wire 1 # M_AXI_ARESETN $end
$var wire 4 n M_AXI_ARID [3:0] $end
$var wire 8 o M_AXI_ARLEN [7:0] $end
$var wire 1 & M_AXI_ARLOCK $end
$var wire 3 p M_AXI_ARPROT [2:0] $end
$var wire 4 q M_AXI_ARQOS [3:0] $end
$var wire 1 ) M_AXI_ARREADY $end
$var wire 2 r M_AXI_ARUSER [-1:0] $end
$var wire 1 I M_AXI_ARVALID $end
$var wire 32 s M_AXI_AWADDR [31:0] $end
$var wire 2 t M_AXI_AWBURST [1:0] $end
$var wire 4 u M_AXI_AWCACHE [3:0] $end
$var wire 4 v M_AXI_AWID [3:0] $end
$var wire 8 w M_AXI_AWLEN [7:0] $end
$var wire 1 0 M_AXI_AWLOCK $end
$var wire 3 x M_AXI_AWPROT [2:0] $end
$var wire 4 y M_AXI_AWQOS [3:0] $end
$var wire 1 M M_AXI_AWREADY $end
$var wire 3 z M_AXI_AWSIZE [2:0] $end
$var wire 2 { M_AXI_AWUSER [-1:0] $end
$var wire 1 5 M_AXI_AWVALID $end
$var wire 4 | M_AXI_BID [3:0] $end
$var wire 1 H M_AXI_BREADY $end
$var wire 2 } M_AXI_BRESP [1:0] $end
$var wire 2 ~ M_AXI_BUSER [-1:0] $end
$var wire 1 9 M_AXI_BVALID $end
$var wire 32 !" M_AXI_RDATA [31:0] $end
$var wire 4 "" M_AXI_RID [3:0] $end
$var wire 1 < M_AXI_RLAST $end
$var wire 1 F M_AXI_RREADY $end
$var wire 2 #" M_AXI_RRESP [1:0] $end
$var wire 2 $" M_AXI_RUSER [-1:0] $end
$var wire 1 ? M_AXI_RVALID $end
$var wire 32 %" M_AXI_WDATA [31:0] $end
$var wire 1 A M_AXI_WLAST $end
$var wire 1 O M_AXI_WREADY $end
$var wire 4 &" M_AXI_WSTRB [3:0] $end
$var wire 2 '" M_AXI_WUSER [-1:0] $end
$var wire 1 D M_AXI_WVALID $end
$var wire 1 E TXN_DONE $end
$var wire 7 (" burst_size_bytes [6:0] $end
$var wire 1 )" init_txn_pulse $end
$var wire 1 *" read_resp_error $end
$var wire 1 +" rnext $end
$var wire 1 ," wnext $end
$var wire 1 -" write_resp_error $end
$var wire 3 ." M_AXI_ARSIZE [2:0] $end
$var wire 32 /" M_AXI_ARADDR [31:0] $end
$var reg 1 G ERROR $end
$var reg 32 0" axi_araddr [31:0] $end
$var reg 1 1" axi_arvalid $end
$var reg 32 2" axi_awaddr [31:0] $end
$var reg 1 3" axi_awvalid $end
$var reg 1 4" axi_bready $end
$var reg 1 5" axi_rready $end
$var reg 32 6" axi_wdata [31:0] $end
$var reg 1 7" axi_wlast $end
$var reg 1 8" axi_wvalid $end
$var reg 1 9" burst_read_active $end
$var reg 1 :" burst_write_active $end
$var reg 1 ;" compare_done $end
$var reg 1 <" error_reg $end
$var reg 32 =" expected_rdata [31:0] $end
$var reg 1 >" init_txn_ff $end
$var reg 1 ?" init_txn_ff2 $end
$var reg 2 @" mst_exec_state [1:0] $end
$var reg 7 A" read_burst_counter [6:0] $end
$var reg 5 B" read_index [4:0] $end
$var reg 1 C" read_mismatch $end
$var reg 1 D" reads_done $end
$var reg 1 E" start_single_burst_read $end
$var reg 1 F" start_single_burst_write $end
$var reg 7 G" write_burst_counter [6:0] $end
$var reg 5 H" write_index [4:0] $end
$var reg 1 I" writes_done $end
$scope function clogb2 $end
$var integer 32 J" bit_depth [31:0] $end
$upscope $end
$upscope $end
$scope module con $end
$var wire 1 L m00_axi_aclk $end
$var wire 1 M m00_axi_awready $end
$var wire 4 K" m00_axi_bid [3:0] $end
$var wire 1 N m00_axi_init_axi_txn $end
$var wire 1 O m00_axi_wready $end
$var reg 3 L" cur [2:0] $end
$var reg 32 M" m00_axi_awaddr [31:0] $end
$var reg 2 N" m00_axi_awburst [1:0] $end
$var reg 4 O" m00_axi_awcache [3:0] $end
$var reg 4 P" m00_axi_awid [3:0] $end
$var reg 8 Q" m00_axi_awlen [7:0] $end
$var reg 1 R" m00_axi_awlock $end
$var reg 3 S" m00_axi_awprot [2:0] $end
$var reg 4 T" m00_axi_awqos [3:0] $end
$var reg 3 U" m00_axi_awsize [2:0] $end
$var reg 1 V" m00_axi_awvalid $end
$var reg 32 W" m00_axi_wdata [31:0] $end
$var reg 1 X" m00_axi_wlast $end
$var reg 4 Y" m00_axi_wstrb [3:0] $end
$var reg 1 Z" m00_axi_wvalid $end
$var reg 3 [" next [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 ["
xZ"
bx Y"
xX"
bx W"
xV"
bx U"
bx T"
bx S"
xR"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bz K"
b0 J"
xI"
bx H"
bx G"
xF"
xE"
xD"
xC"
bx B"
bx A"
bx @"
x?"
x>"
bx ="
x<"
x;"
x:"
x9"
x8"
x7"
bx 6"
x5"
x4"
x3"
bx 2"
x1"
bx 0"
bx /"
b10 ."
x-"
x,"
x+"
x*"
x)"
b1000000 ("
b0 '"
bx &"
bx %"
bz $"
bz #"
bz ""
bz !"
bz ~
bz }
bz |
b1 {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
b1 r
b0 q
b0 p
b1111 o
b0 n
b10 m
b1 l
bx k
b10 j
b0 i
bx h
bx g
bz f
bz e
bz d
bz c
bz b
bz a
bz `
b1 _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
b1 V
b0 U
b0 T
b1111 S
b0 R
b10 Q
b1 P
1O
xN
1M
0L
bx K
b10 J
xI
xH
xG
xF
xE
xD
b0 C
bx B
xA
bx @
z?
bz >
bz =
z<
bz ;
bz :
z9
bz 8
bz 7
bz 6
x5
b1 4
bx 3
bx 2
bx 1
x0
bx /
bx .
bx -
bx ,
bx +
b1 *
z)
b0 (
b0 '
0&
b1111 %
b0 $
z#
b10 "
b1 !
$end
#50000
0C"
b0 @"
b0 L"
1L
#100000
b1 ["
0L
1N
#150000
1>"
0Z"
0V"
b1111 B
b1111 h
b1111 &"
b1111 Y"
b0x 2
b0x ]
b0x y
b1 T"
b0 1
b0 \
b0 x
b0 S"
b0xx -
b0xx Y
b0xx u
b1 O"
00
0R"
b0x ,
b0x X
b0x t
b0 N"
bx0 3
bx0 ^
bx0 z
b100 U"
b0xxxx /
b0xxxx [
b0xxxx w
b0 Q"
b10 ["
b1 L"
1L
#200000
0L
#250000
0)"
1?"
1Z"
1V"
1X"
b1111111000000001 W"
b11100000000000001010001000000100 M"
b0 .
b0 Z
b0 v
b0 P"
b100 ["
b10 L"
1L
#300000
0L
#350000
b11100000000000001010001000001000 M"
b0x .
b0x Z
b0x v
b1 P"
b110 ["
b100 L"
1L
#400000
0L
#450000
b1 W"
b11100000000000001010000001000000 M"
b0x0 .
b0x0 Z
b0x0 v
b10 P"
b110 L"
1L
#500000
0L
#550000
1L
#600000
0L
#650000
1L
#700000
0L
#750000
1L
#800000
0L
#850000
1L
#900000
0L
#950000
1L
#1000000
0L
#1050000
1L
#1100000
0L
#1150000
1L
#1200000
0L
#1250000
1L
#1300000
0L
#1350000
1L
#1400000
0L
#1450000
1L
#1500000
0L
#1550000
1L
#1600000
0L
#1650000
1L
#1700000
0L
#1750000
1L
#1800000
0L
#1850000
1L
#1900000
0L
#1950000
1L
#2000000
0L
#2050000
1L
#2100000
0L
#2150000
1L
#2200000
0L
#2250000
1L
#2300000
0L
#2350000
1L
#2400000
0L
#2450000
1L
#2500000
0L
#2550000
1L
#2600000
0L
#2650000
1L
#2700000
0L
#2750000
1L
#2800000
0L
#2850000
1L
#2900000
0L
#2950000
1L
#3000000
